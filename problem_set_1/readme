Problem Set 1
Problem: Palindrome Pairs
Problem Description:
Given a list of unique words, your task is to find all pairs of distinct indices (i, j) in the list so that the concatenation of the two words, i.e., words[i] + words[j], forms a palindrome.

Example:
For the input ["bat", "tab", "cat"], the output should be [[0, 1], [1, 0]] because the palindromes are ["battab", "tabbat"].

Instructions:
1.	Palindrome Checking:
a.	A palindrome is a word that reads the same backward as forward (e.g., "radar").
b.	You need to check if the concatenation of two words forms a palindrome.
2.	Unique Indices:
a.	Ensure that the pairs of indices are distinct. For example, [0, 1] and [1, 0] are considered the same pair.
3.	Output Format:
a.	The output should be a list of lists, where each inner list represents a pair of indices that form a palindrome.
4.	Test Your Solution:
a.	Test your solution with different inputs to ensure it handles various cases.


Functions:
-isPalindrome(s string): Checks if a string is a palindrome by comparing characters from both ends.
-reverse(s string): Reverses a string.
-removeDuplicates(slice [][]int): Removes duplicate pairs from a slice of integer slices using a map.
-palindromePairs(words []string): Finds all pairs of indices where the words form palindrome pairs, using the helper functions isPalindrome, reverse, and removeDuplicates.
